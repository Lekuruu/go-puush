name: Build Application Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            output: puush-windows.exe
            artifact: puush-windows
          - goos: linux
            goarch: amd64
            output: puush-linux
            artifact: puush-linux

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Build for ${{ matrix.goos }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -ldflags="-s -w" -o ${{ matrix.output }} ./cmd/puush/

    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.output }}

    - name: Upload Release Asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ matrix.output }}
        asset_name: ${{ matrix.output }}
        asset_content_type: application/octet-stream

    - name: Prepare container image metadata
      if: matrix.goos == 'linux' && github.event_name != 'pull_request'
      run: |
        IMAGE_NAME="ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
        echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"

    - name: Log in to GitHub Container Registry
      if: matrix.goos == 'linux' && github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push container image
      if: matrix.goos == 'linux' && github.event_name != 'pull_request'
      run: |
        docker build -f Dockerfile -t "$IMAGE_NAME:sha-${{ github.sha }}" .
        docker push "$IMAGE_NAME:sha-${{ github.sha }}"
        docker tag "$IMAGE_NAME:sha-${{ github.sha }}" "$IMAGE_NAME:latest"
        docker push "$IMAGE_NAME:latest"
