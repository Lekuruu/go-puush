name: Publish Docker Image

on:
  push:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:

jobs:
  docker:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true
        cache-dependency-path: go.sum

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare image metadata
      id: meta
      run: |
        IMAGE_NAME="ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
        TAGS="$IMAGE_NAME:sha-${{ github.sha }}"
        if [ "${{ github.event_name }}" = "release" ]; then
          TAGS="$TAGS,$IMAGE_NAME:${{ github.event.release.tag_name }}"
        fi
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          TAGS="$TAGS,$IMAGE_NAME:latest"
        fi
        echo "image_name=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
        echo "tags=$TAGS" >> "$GITHUB_OUTPUT"

    - name: Build static binaries for amd64 and arm64
      run: |
        set -euo pipefail
        mkdir -p dist
        for ARCH in amd64 arm64; do
          echo "Building for linux/$ARCH"
          GOOS=linux GOARCH=$ARCH CGO_ENABLED=0 \
            go build -trimpath -ldflags="-s -w" -o "dist/puush-linux-$ARCH" ./cmd/puush/
        done

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: .github/Dockerfile.ci
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        provenance: false
        sbom: false
        cache-from: type=gha
        cache-to: type=gha,mode=max
